using System;
using System.IO;
using Newtonsoft.Json;

namespace Blenordia.Source.Handlers
{
    /// <summary>
    /// Represents the basic information and configuration for a map
    /// </summary>
    public struct MapInfo
    {
        /// <summary>
        /// Creates a new MapInfo instance
        /// </summary>
        /// <param name="name">The name of the map</param>
        /// <param name="width">The width of the map in tiles</param>
        /// <param name="height">The height of the map in tiles</param>
        public MapInfo(string name, int width = 512, int height = 512)
        {
            if (string.IsNullOrEmpty(name))
                throw new ArgumentException("Map name cannot be empty", nameof(name));

            Name = name;
            Width = width;
            Height = height;

            string baseDirectory = Path.Combine("Data", "Maps", name);
            FileInfo = new FileInfo(name, ".cs", baseDirectory);
            File = File.Create(FileInfo);
        }

        public string Name { get; }
        public int Width { get; }
        public int Height { get; }

        internal FileInfo FileInfo { get; }
        public File File { get; }
    }

    /// <summary>
    /// Represents a game map and handles map creation and management
    /// </summary>
    public sealed class Map
    {
        public MapInfo Info { get; }

        private Map(MapInfo info)
        {
            Info = info;
        }

        /// <summary>
        /// Creates a new map with the specified configuration
        /// </summary>
        /// <param name="info">The map configuration</param>
        /// <returns>A new Map instance</returns>
        public static Map Create(MapInfo info)
        {
            // Ensure the directory exists and is clean
            string directoryPath = Path.GetDirectoryName(info.File.Info.Location)!;
            if (Directory.Exists(directoryPath))
            {
                Directory.Delete(directoryPath, true);
            }
            Directory.CreateDirectory(directoryPath);

            // Create and save the map files
            CreateMapFiles(info);
            SaveMapMetadata(info);
            GenerateMapSourceCode(info);

            return new Map(info);
        }

        private static void CreateMapFiles(MapInfo info)
        {
            // Create the main CS file
            using (FileStream csFile = System.IO.File.Create(info.File.Info.Location))
            {
                // File will be automatically closed by using statement
            }

            // Create the JSON metadata file
            string jsonPath = Path.ChangeExtension(info.File.Info.Location, ".json");
            using (FileStream jsonFile = System.IO.File.Create(jsonPath))
            {
                // File will be automatically closed by using statement
            }
        }

        private static void SaveMapMetadata(MapInfo info)
        {
            string jsonPath = Path.ChangeExtension(info.File.Info.Location, ".json");
            string serializedInfo = JsonConvert.SerializeObject(info, Formatting.Indented);
            System.IO.File.WriteAllText(jsonPath, serializedInfo);
            Console.WriteInfo(serializedInfo);
        }

        private static void GenerateMapSourceCode(MapInfo info)
        {
            const string header =
                "/*\n * This file is generated by Blenordia Map Generator\n */";

            string sourceCode = $@"{header}
using Blenordia.Source.Handlers;

namespace Blenordia.Maps 
{{
    public class {info.Name} : World
    {{
        public Map Map {{ get; }}

        public {info.Name}(Map map) : base(map)
        {{
            Map = map;
        }}
    }}
}}";

            info.File.WriteAllText(sourceCode);
        }
    }
}
